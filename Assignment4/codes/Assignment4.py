# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Uqn1K-sdGDqFm6UpKCpBViddcoO6QiE
"""

import math
from scipy.stats import binom
import matplotlib.pyplot as plt
import array as arr
import numpy as np
#function to calculate factorial
def fact_func(a):
  ans = 1
  for x in range(1 , a + 1):
    ans = ans * x
  return ans

#function to calculate binomial coefficient
def ncr(n , r):
  ans = fact_func(n) / (fact_func(r) * fact_func(n - r))
  return ans

#function to calculate the probability 
def prob_theo(n , p ,r):

  sum =  ( ncr(n , r) )* ( pow(p , r) ) * ( pow((1-p) , n - r) )
  return sum

p=1/6
#probability of getting an odd number on dice


n=5
#total number of throws


r_values = np.arange(n+1)


sample_size=500000

binom_dist=[binom.pmf(r, n, p) for r in r_values ] 

binomial_simulation = binom.rvs(n,p,size=sample_size)
#Array containing the simulated probability distribution for each value of r 

count=[0]*(n+1)
#array for count
prob_sim=[0]*(n+1)



for i in range(sample_size):
  for j in range(n+1) :
     if binomial_simulation[i] == j:
       count[j]+=1


 
for k in range(n+1):
  prob_sim[k]=count[k]/sample_size
#Theory Vs simulation.

print("simulated probability in percentage",(prob_sim[4]+prob_sim[5])*100)
x=prob_theo(5,1/6,4)+prob_theo(5,1/6,5)
print("theoritical Probability in percentage",x*100)

#plotting
# x-coordinates of left sides of bars 
left = [1, 2]
  
# heights of bars
height = [0.334,0.3368]
  
# labels for bars
tick_label = ['Theory', 'Simulation']
  
# plotting a bar chart
plt.bar(left, height, tick_label = tick_label,
        width = 0.8, color = ['red', 'green'])
  

# naming the y-axis
plt.ylabel('Probability in percentage')
# plot title
plt.title('theory vs simulation')
  
# function to show the plot
plt.show()